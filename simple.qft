void printf(char *fmt);

int main(int argc, char **argv)
{
	int matrix(3, 3) mat1;
	int matrix(3, 3) mat2;
	int matrix(3, 3) mat3;
	int matrix(3, 3) result;

	// This comment should survive to the generated code
	result = mat1 * mat2
	result = mat1 * mat2 * mat3;

	printf("Hello World!\n");

	return 0;
}






/* Generated C code 


struct intmat3x3
{
    int m[9];
};

intmat3x3 intmat3x3_mul(intmat3x3 lhs, intmat3x3 rhs)
{
    intmat3x3 ret;
    ret.m[0] = lhs.m[0] * rhs.m[0] + lhs.m[1] * rhs.m[3] + lhs.m[2] * rhs.m[6];
    ret.m[3] = lhs.m[3] * rhs.m[0] + lhs.m[4] * rhs.m[3] + lhs.m[5] * rhs.m[6];
    ret.m[6] = lhs.m[6] * rhs.m[0] + lhs.m[7] * rhs.m[3] + lhs.m[8] * rhs.m[6];
    ret.m[1] = lhs.m[0] * rhs.m[1] + lhs.m[1] * rhs.m[4] + lhs.m[2] * rhs.m[7];
    ret.m[4] = lhs.m[3] * rhs.m[1] + lhs.m[4] * rhs.m[4] + lhs.m[5] * rhs.m[7];
    ret.m[7] = lhs.m[6] * rhs.m[1] + lhs.m[7] * rhs.m[4] + lhs.m[8] * rhs.m[7];
    ret.m[2] = lhs.m[0] * rhs.m[2] + lhs.m[1] * rhs.m[5] + lhs.m[2] * rhs.m[8];
    ret.m[5] = lhs.m[3] * rhs.m[2] + lhs.m[4] * rhs.m[5] + lhs.m[5] * rhs.m[8];
    ret.m[8] = lhs.m[6] * rhs.m[2] + lhs.m[7] * rhs.m[5] + lhs.m[8] * rhs.m[8];
    return ret;
}

void printf(char *fmt);

int main(int argc, char **argv)
{
    intmat3x3 mat1;
    intmat3x3 mat2;
    intmat3x3 mat3;
    intmat3x3 result;

    /* This comment should survive to the generated code */
    result = intmat3x3_mul(mat1, mat2);
    result = intmat3x3_mul(intmat3x3_mul(mat1, mat2), mat3);

    printf("Hello World!\n");

    return 0;
}
*/



/* Generated CUDA(ish) code


struct intmat3x3
{
    int m[9];
};

void mul_intmat3x3_intmat3x3_(intmat3x3 *result_cuda, intmat3x3 *mat1_cuda, intmat3x3 *mat2_cuda)
{
    int x = threadIdx.x;
    int y = threadIdx.y;
    /* @todo Matrix calculation */;
}

void mul_mul_intmat3x3_intmat3x3_intmat3x3_(intmat3x3 *result_cuda, intmat3x3 *mat1_cuda, intmat3x3 *mat2_cuda, intmat3x3 *mat3_cuda)
{
    int x = threadIdx.x;
    int y = threadIdx.y;
    /* @todo Matrix calculation */;
}

void printf(char *fmt);

int main(int argc, char **argv)
{
    intmat3x3 mat1;
    intmat3x3 mat2;
    intmat3x3 mat3;
    intmat3x3 result;

    /* This comment should survive to the generated code */
    {
        intmat3x3 *result_cuda;
        intmat3x3 *mat1_cuda;
        intmat3x3 *mat2_cuda;
        cudaMalloc((void**)&result_cuda, sizeof(*result_cuda));
        cudaMalloc((void**)&mat1_cuda, sizeof(*mat1_cuda));
        cudaMalloc((void**)&mat2_cuda, sizeof(*mat2_cuda));
        cudaMemcpy(mat1_cuda, mat1, sizeof(*mat1_cuda), cudaMemcpyHostToDevice);
        cudaMemcpy(mat2_cuda, mat2, sizeof(*mat2_cuda), cudaMemcpyHostToDevice);
        dim3 dim_grid(1, 1, 1);
        dim3 dim_block(3, 3, 1);
        mul_intmat3x3_intmat3x3_<<<dim_grid, dim_block>>>(result_cuda, mat1_cuda, mat2_cuda);
        cudaMemcpy(result, result_cuda, sizeof(*result_cuda), cudaMemcpyDeviceToHost);
        cudaFree(result_cuda);
        cudaFree(mat1_cuda);
        cudaFree(mat2_cuda);
    }
    {
        intmat3x3 *result_cuda;
        intmat3x3 *mat1_cuda;
        intmat3x3 *mat2_cuda;
        intmat3x3 *mat3_cuda;
        cudaMalloc((void**)&result_cuda, sizeof(*result_cuda));
        cudaMalloc((void**)&mat1_cuda, sizeof(*mat1_cuda));
        cudaMalloc((void**)&mat2_cuda, sizeof(*mat2_cuda));
        cudaMalloc((void**)&mat3_cuda, sizeof(*mat3_cuda));
        cudaMemcpy(mat1_cuda, mat1, sizeof(*mat1_cuda), cudaMemcpyHostToDevice);
        cudaMemcpy(mat2_cuda, mat2, sizeof(*mat2_cuda), cudaMemcpyHostToDevice);
        cudaMemcpy(mat3_cuda, mat3, sizeof(*mat3_cuda), cudaMemcpyHostToDevice);
        dim3 dim_grid(1, 1, 1);
        dim3 dim_block(3, 3, 1);
        mul_mul_intmat3x3_intmat3x3_intmat3x3_<<<dim_grid, dim_block>>>(result_cuda, mat1_cuda, mat2_cuda, mat3_cuda);
        cudaMemcpy(result, result_cuda, sizeof(*result_cuda), cudaMemcpyDeviceToHost);
        cudaFree(result_cuda);
        cudaFree(mat1_cuda);
        cudaFree(mat2_cuda);
        cudaFree(mat3_cuda);
    }

    printf("Hello World!\n");

    return 0;
}


*/
